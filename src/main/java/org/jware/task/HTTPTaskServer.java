package org.jware.task;import java.io.*;import java.util.*;import java.net.*;public class HTTPTaskServer {    public static final String DEFAULT_HTML_FILE = "default.html";    static Hashtable fileTable;    String path;    String currentFile;    String passwordFile;    String defaultHTMLFile;    public class HTTPTask extends Task {        Socket client;        /**         *         * Default constructor         *         */        public HTTPTask(Socket client, String path, String passWords, String defaultHTMLFile) {            // tell super that we this task dies after it completes.            super(false,0);            fileTable = new Hashtable();            this.client = client;            HTTPTaskServer.this.path = path;            currentFile = null;            passwordFile = passWords;            HTTPTaskServer.this.defaultHTMLFile = (defaultHTMLFile == null) ? DEFAULT_HTML_FILE : defaultHTMLFile;        }        /**         *         * Do the task         *         */        public void doTask() {            processRequest();            processFile();        }        /**         *         * Process the GET request         *         */        void processRequest() {            try {                DataInputStream in = new DataInputStream(client.getInputStream());                String request = in.readLine();                while ((request != null) && !"".equals(request)) {                    StringTokenizer tokenizer = new StringTokenizer(request, " ");                    if ("GET".equals(tokenizer.nextToken())) {                        currentFile = tokenizer.nextToken();                        if ("/".equals(currentFile) || passwordFile.equals(currentFile)) {                            currentFile = DEFAULT_HTML_FILE;                        } else {                            currentFile = currentFile.substring(1);                        }                    }                    request = in.readLine();                }            } catch (Throwable t) {                t.printStackTrace();            }        }        /**         *         * Get the requested file and send it back to the browser.         *         */        public void processFile() {            boolean inCache = false;            try {                DataOutputStream out = new DataOutputStream(client.getOutputStream());                if (currentFile != null) {                    byte[] content;                    if (fileTable.containsKey(currentFile)) {                        content = (byte[]) fileTable.get(currentFile);                        inCache = true;                    } else {                        content = getFileData();                    }                    if (content == null) {                        content = constructNotFound(currentFile);                        out.write(content, 0, content.length);                        out.flush();                    } else {                        out.write(constructHeader(currentFile, content.length));                    }                    out.write(content, 0, content.length);                    out.flush();                    out.close();                }            } catch (Throwable t) {                t.printStackTrace();            }        }        /**         *         * Read in the file data.         *         */        byte[] getFileData() {            try {				// Using a RandomAccessFile avoids having to loop read for the length of the file, i.e.                 // the data is gathered in one big read.                RandomAccessFile in;                in = new RandomAccessFile(path + currentFile, "r");                byte[] data = new byte[(int) in.length()];                in.read(data, 0, (int) in.length());                fileTable.put(currentFile, data);                return data;            } catch (Throwable t) {                t.printStackTrace();                return null;            }        }        /**         *         * File not found header.         *         */        byte[] constructNotFound(String fileName) {            StringBuffer buff = new StringBuffer();            buff.append("HTTP/1.0 404 Not Found\nContent-Type: text/plain\n");            buff.append("The file you have accessed has been moved, changed or deleted.\n");            buff.append("Please try accessing the site from the home page.\n\n");            return buff.toString().getBytes();        }        /**         *         * Normal header         *         */        byte[] constructHeader(String fileName, int fileLength) {            String contentType;            if ((fileName.toLowerCase().endsWith(".jpg")) || (fileName.toLowerCase().endsWith(".jpeg")) || (fileName.toLowerCase().endsWith(".jpe"))) {                contentType = "image/jpg";            } else if ((fileName.toLowerCase().endsWith(".gif"))) {                contentType = "image/gif";            } else if ((fileName.toLowerCase().endsWith(".htm"))                    || (fileName.toLowerCase().endsWith(".html"))) {                contentType = "text/html";            } else if ((fileName.toLowerCase().endsWith(".qt"))                    || (fileName.toLowerCase().endsWith(".mov"))) {                contentType = "video/quicktime";            } else if ((fileName.toLowerCase().endsWith(".class"))) {                contentType = "applcation/class";            } else if ((fileName.toLowerCase().endsWith(".mpg"))                    || (fileName.toLowerCase().endsWith(".mpeg"))                    || (fileName.toLowerCase().endsWith(".mpe"))) {                contentType = "video/mpeg";            } else if ((fileName.toLowerCase().endsWith(".au"))                    || (fileName.toLowerCase().endsWith(".snd"))) {                contentType = "audio/basic";            } else if ((fileName.toLowerCase().endsWith(".wav"))) {                contentType = "audio/x-wave";            } else {                contentType = "text/plain";            }            StringBuffer returnHeader = new StringBuffer();            returnHeader.append("HTTP/1.0 200 OK\n");            returnHeader.append("Allow: GET\n");            returnHeader.append("Server:  HTTPServer/1.0\n");            returnHeader.append("Content-Type: " + contentType + "\n");            returnHeader.append("Content-Length: " + fileLength + "\n\n");            return returnHeader.toString().getBytes();        }    }}