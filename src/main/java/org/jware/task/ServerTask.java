package org.jware.task;/* * Copyright (C) 2014 J. Paul Jackson <jwareservices@gmail.com> * * This program is free software: you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by * the Free Software Foundation, either version 3 of the License, or * (at your option) any later version. * * This program is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. * * You should have received a copy of the GNU General Public License * along with this program.  If not, see <http://www.gnu.org/licenses/>. */import java.io.InputStream;import java.io.OutputStream;import java.net.ServerSocket;import java.net.Socket;import java.util.EventObject;/* * File: ServerTask.java * * @author J. Paul Jackson <jwareservices@gmail.com> *  * @version 1.3 July 8, 1998 */public class ServerTask extends Task {    ServerSocket server;    InputStream in;    OutputStream out;    Socket ss;    String serviceName;    int port;    RemoteReceiveEventTask re;    public ServerTask(int port, String serviceName) {        super(true, 0);        this.serviceName = serviceName;        this.port = port;        try {            if (this.serviceName == null) {                throw new ServiceNotNamedException("Service name cannot be null.");            }            server = new ServerSocket(this.port);            System.out.println(serviceName + " listening on port " + this.port);        } catch (Throwable t) {            t.printStackTrace();        }    }    public void acceptSocket(Socket s) {        ss = s;        try {            re = new RemoteReceiveEventTask(ss.getInputStream());        } catch (Throwable t) {            t.printStackTrace();        }    }    public void resetService(String className) {        serviceName = new String(className);        if (serviceName == null) {            throw new ServiceNotNamedException("Service name is null.");        }    }    public void doTask() {        try {            Socket s = server.accept();            System.out.println("got one");            Class cl = Class.forName(serviceName);            Object service = cl.newInstance();            if (service instanceof SocketHandler) {                ((SocketHandler) service).acceptSocket(s);            }            if (re.hasEvent) {                EventObject e = re.getNextEvent();                new RemoteSendEventTask(e, ss.getOutputStream());            }        } catch (Throwable t) {            t.printStackTrace();        }    }}