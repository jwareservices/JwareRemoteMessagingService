package org.jware.sources;/* * Copyright (C) 2014 J. Paul Jackson <jwareservices@gmail.com> * * This program is free software: you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by * the Free Software Foundation, either version 3 of the License, or * (at your option) any later version. * * This program is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. * * You should have received a copy of the GNU General Public License * along with this program.  If not, see <http://www.gnu.org/licenses/>. */import java.awt.Component;import java.awt.Dialog;import java.awt.Dimension;import java.awt.Frame;import java.awt.Point;import java.awt.Rectangle;import java.io.*;import org.jware.notify.Notifiable;import org.jware.remote.RemoteNotifier;import org.jware.util.NotificationEvent;/* * File: ChatNotifiable.java * * @author J. Paul Jackson <jwareservices@gmail.com> *  * @version 1.3 Feb. 4, 1997 *//*  * These classes are support classes for the test project.*/interface ChatNotifiable extends Notifiable {    public static final String NEWUSER = "NEWUSER";    public static final String CHAT = "CHAT";    public static final String USERDIED = "USERDIED";}public class ChatPeer implements ChatNotifiable {    public static final int PORT = 8080;    RemoteNotifier remoteNotifier;    String id;    public void init() {       try {             id = "Test";            remoteNotifier = new RemoteNotifier(this);            remoteNotifier.connect("10.10.10.5", PORT);            NotificationEvent note = new NotificationEvent(this, NEWUSER);            note.addArg(id);            note.addArg(" has joined.");            remoteNotifier.postNotification(note);        } catch (IOException exc) {            System.out.println("CONNECTION FAILED, " + exc.toString());        }    }        public boolean receiveNotify( Object src, Object trg, int id) {        receiveNotification((NotificationEvent)src);        return true;    }        public boolean receiveNotification(NotificationEvent note) {        String msgID = note.getID();        if (NEWUSER.equals(msgID)) {            System.out.println((String) note.getArg(0));            System.out.println((String) note.getArg(1));        } else if (CHAT.equals(msgID)) {            System.out.println((String) note.getArg(0));        } else if (USERDIED.equals(msgID)) {            System.out.println("Died");        }        return true;    }    public void sendChat() {        NotificationEvent note = new NotificationEvent(this, CHAT);        StringBuffer buff = new StringBuffer(id);        buff.append(" says: ");        buff.append("");        note.addArg((String) buff.toString());        remoteNotifier.postNotification(note);    }    public ChatPeer() {        init();    }    public ChatPeer(String title) {        this();    }    static public void main(String args[]) {        new ChatPeer();    }}class ConnectDialog extends Dialog {    public ConnectDialog(Frame parent, boolean modal) {        super(parent, modal);        // This code is automatically generated by Visual Cafe when you add        // components to the visual environment. It instantiates and initializes        // the components. To modify the code, only use code syntax that matches        // what Visual Cafe can generate, or Visual Cafe may be unable to back        // parse your Java file into its visual environment.        //{{INIT_CONTROLS        setLayout(null);        setVisible(false);        setSize(251, 86);        nameText = new java.awt.TextField();        nameText.setBounds(127, 30, 104, 22);        add(nameText);        label2 = new java.awt.Label("Enter your name:");        label2.setBounds(8, 28, 113, 21);        add(label2);        addrText = new java.awt.TextField();        addrText.setText("166.82.126.40");        addrText.setBounds(127, 2, 104, 22);        add(addrText);        label1 = new java.awt.Label("Server IP Address:");        label1.setBounds(5, 5, 122, 13);        add(label1);        connectButton = new java.awt.Button();        connectButton.setLabel("CONNECT");        connectButton.setBounds(60, 60, 135, 19);        add(connectButton);        setTitle("Connect To...");        setResizable(false);        //}}        //{{REGISTER_LISTENERS        SymWindow aSymWindow = new SymWindow();        this.addWindowListener(aSymWindow);        SymAction lSymAction = new SymAction();        connectButton.addActionListener(lSymAction);        //}}    }    public void addNotify() {        // Record the size of the window prior to calling parents addNotify.        Dimension d = getSize();        super.addNotify();        if (fComponentsAdjusted) {            return;        }        // Adjust components according to the insets        setSize(insets().left + insets().right + d.width, insets().top + insets().bottom + d.height);        Component components[] = getComponents();        for (int i = 0; i < components.length; i++) {            Point p = components[i].getLocation();            p.translate(insets().left, insets().top);            components[i].setLocation(p);        }        fComponentsAdjusted = true;    }    // Used for addNotify check.    boolean fComponentsAdjusted = false;    public ConnectDialog(Frame parent, String title, boolean modal) {        this(parent, modal);        setTitle(title);    }    public void setVisible(boolean b) {        if (b) {            Rectangle bounds = getParent().getBounds();            Rectangle abounds = getBounds();            setLocation(bounds.x + (bounds.width - abounds.width) / 2,                    bounds.y + (bounds.height - abounds.height) / 2);        }        super.setVisible(b);    }    //{{DECLARE_CONTROLS    java.awt.TextField nameText;    java.awt.Label label2;    java.awt.TextField addrText;    java.awt.Label label1;    java.awt.Button connectButton;    //}}    class SymWindow extends java.awt.event.WindowAdapter {        public void windowClosing(java.awt.event.WindowEvent event) {            Object object = event.getSource();            if (object == ConnectDialog.this) {                ConnectDialog_WindowClosing(event);            }        }    }    void ConnectDialog_WindowClosing(java.awt.event.WindowEvent event) {        setVisible(false);    }    class SymAction implements java.awt.event.ActionListener {        public void actionPerformed(java.awt.event.ActionEvent event) {            Object object = event.getSource();            if (object == connectButton) {                connectButton_ActionPerformed(event);            }        }    }    void connectButton_ActionPerformed(java.awt.event.ActionEvent event) {        addr = addrText.getText();        name = nameText.getText();        setVisible(false);    }    String addr;    public String getAddress() {        return addr;    }    String name;    public String getName() {        return name;    }}