package org.jware.util;/* * Copyright (C) 2014 J. Paul Jackson <jwareservices@gmail.com> * * This program is free software: you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by * the Free Software Foundation, either version 3 of the License, or * (at your option) any later version. * * This program is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. * * You should have received a copy of the GNU General Public License * along with this program.  If not, see <http://www.gnu.org/licenses/>. *//* * File: Queue.java * * @author J. Paul Jackson <jwareservices@gmail.com> *  * @version 1.3 June 4, 1998 *//** * * Queue is a simple extended Vector that facilitates a FIFO queue. Its * default initial capacity and increment are 0 and 5 respectively. By using a * default value of 5 for the increment, we optimize memory and efficiency . * When the queue becomes full, JWQueue allocates enough storage for five more * objects. Memory is less likely to fragment, especially for systems that * utilize handles. Likewise, there are less calls to the memory manager, * keeping cycles lower for better efficiency.<p> * */public class Queue extends java.util.Vector {    /**     * Constructor. Calls super with the initial capacity and capacity     * increment.<p>     * @param	initialCapacity is initial amount of memory to be allocated.<p>     * @param	capacityIncrement is the amount to grow the Vector when needed.     */    public Queue(int initalCapacity, int capacityIncrement) {        super(initalCapacity, capacityIncrement);    }    /**     * Default constructor.     */    public Queue() {        super(0, 5);    }    /**     * Elements are added at the end of the vector.<p>     * @param	objectToQueue is the element to add.     */    public void enqueue(Object objectToQueue) {        addElement(objectToQueue);    }    /**     * Remove an element from the queue.<p>     * @return The dequeued object.     */    public Object dequeue() {        Object returnObject = null;		//        // Using the isEmpty method JWQueue determines that at least the first slot of the        // vector is valid, so you can be assurred that the next 2 statements will not fail.        //        if (!isEmpty()) {            returnObject = firstElement();            removeElement(returnObject);			//            // Capacity returns the number of slots available before reallocation is neccessary.            // This logic keeps the queue from growing too large.            //            if (capacity() > 5) {                trimToSize();            }        }        return returnObject;    }}