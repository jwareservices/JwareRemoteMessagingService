package org.jware.util;/* * Copyright (C) 2014 J. Paul Jackson <jwareservices@gmail.com> * * This program is free software: you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by * the Free Software Foundation, either version 3 of the License, or * (at your option) any later version. * * This program is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. * * You should have received a copy of the GNU General Public License * along with this program.  If not, see <http://www.gnu.org/licenses/>. */import java.io.DataInputStream;import java.io.DataOutputStream;import java.io.IOException;import java.io.OutputStream;import java.util.Enumeration;import java.util.EventObject;import java.util.Vector;/* * File: NotificationEvent.java * * @author J. Paul Jackson <jwareservices@gmail.com> *  * @version 1.2 July. 4, 1998 *//** * This is a simple wrapper class for packaging notifications for a Notifier * object to send to Notifiable objects. Notification allows space for two ( * Object 0s and an ( int ). What is contained in these variables is determined * by the user.<p> * */public class NotificationEvent extends EventObject {    /**     * A default ID     */    public static final String DEFAULT_ID = "DEFAULT_ID#";    /**     * Marks the end of the notification.     */    public static final String END_TOKEN = "END_TOKEN";    protected String notifyID;    protected Vector notifyArgs;    static int nextID = 1;    /**     * Default constructor sets up argument vector member and the DEFAULT_ID.<p>     */    public NotificationEvent(Object source, String id) {        super(source);        notifyArgs = new Vector();        if (id == null) {            notifyID = nextID();        } else {            notifyID = id;        }    }    String nextID() {        StringBuffer buff = new StringBuffer(DEFAULT_ID);        buff.append(String.valueOf(nextID++));        return buff.toString();    }    public void setID(String newID) {        notifyID = newID;    }    public String getID() {        return notifyID;    }    public void addArg(Object arg) {        notifyArgs.addElement(arg);    }    public Object getArg(int ndx) {        return notifyArgs.elementAt(ndx);    }    public Enumeration getArgs() {        return notifyArgs.elements();    }    public boolean readArgs(DataInputStream i) {        DataInputStream in = new DataInputStream(i);        try {            String token = in.readUTF();            while (!END_TOKEN.equals(token)) {                addArg(token);                token = in.readUTF();            }        } catch (IOException e) {            return false;        }        return true;    }    public boolean writeArgs(OutputStream o) {        int length = notifyArgs.size();        DataOutputStream out = new DataOutputStream(o);        try {            for (int i = 0; i < length; i++) {                String arg = (String) notifyArgs.elementAt(i);                out.writeUTF(arg);            }            out.writeUTF(END_TOKEN);        } catch (IOException e) {            return false;        }        return true;    }}